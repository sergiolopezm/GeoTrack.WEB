@page "/paises/crear"
@page "/paises/editar/{Id:int}"
@using GeoTrack.WEB.Services.Interface
@using GeoTrack.WEB.Models.Ubicacion
@using GeoTrack.WEB.Shared
@using GeoTrack.WEB.Models
@using Microsoft.AspNetCore.Authorization
@inject IPaisService PaisService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="container-fluid">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">@(_esEdicion ? "Editar" : "Crear") País</h5>
        </div>
        <div class="card-body">
            <EditForm Model="paisModel" OnValidSubmit="GuardarPais" class="row g-3">
                <DataAnnotationsValidator />

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre <span class="text-danger">*</span></label>
                        <InputText id="nombre" @bind-Value="paisModel.Nombre" class="form-control" placeholder="Ingrese el nombre del país" maxlength="100" />
                        <ValidationMessage For="@(() => paisModel.Nombre)" class="text-danger" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="codigoISO" class="form-label">Código ISO <span class="text-danger">*</span></label>
                        <InputText id="codigoISO" @bind-Value="paisModel.CodigoISO" class="form-control" placeholder="Ingrese el código ISO (3 caracteres)" maxlength="3" />
                        <ValidationMessage For="@(() => paisModel.CodigoISO)" class="text-danger" />
                        <small class="form-text text-muted">Código ISO de 3 caracteres (ej. COL, USA, ESP)</small>
                    </div>
                </div>

                @if (_esEdicion)
                {
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="estado" class="form-label">Estado</label>
                            <div class="form-check form-switch">
                                <InputCheckbox @bind-Value="paisModel.Activo" class="form-check-input" id="estado" />
                                <label class="form-check-label" for="estado">
                                    @(paisModel.Activo ? "Activo" : "Inactivo")
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label">Departamentos asociados</label>
                            <div class="form-control bg-light" style="height: auto; min-height: 38px;">
                                @if (_cargando)
                                {
                                    <div class="placeholder-glow">
                                        <span class="placeholder col-6"></span>
                                    </div>
                                }
                                else
                                {
                                    <span class="badge bg-info rounded-pill">@paisModel.DepartamentosCount</span>
                                }
                            </div>
                        </div>
                    </div>
                }

                <div class="col-12 mt-4">
                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                            <i class="bi bi-x-circle me-1"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@_cargando">
                            @if (_cargando)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Guardando...</span>
                            }
                            else
                            {
                                <i class="bi bi-save me-1"></i>
                                <span>Guardar</span>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>

            <Alert @ref="_alertComponent" Desaparecible="true" AutoDesaparecer="true" TiempoDesaparicion="5000" />
        </div>
    </div>

    @if (_esEdicion && paisModel != null)
    {
        <div class="card mt-4">
            <div class="card-header bg-light">
                <h6 class="mb-0">Información adicional</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p class="mb-1"><strong>Fecha de creación:</strong></p>
                        <p>@(paisModel.FechaCreacion.ToString("dd/MM/yyyy HH:mm"))</p>
                    </div>
                    <div class="col-md-6">
                        <p class="mb-1"><strong>Creado por:</strong></p>
                        <p>@(paisModel.CreadoPor ?? "Sistema")</p>
                    </div>
                    @if (paisModel.FechaModificacion.HasValue)
                    {
                        <div class="col-md-6">
                            <p class="mb-1"><strong>Fecha de modificación:</strong></p>
                            <p>@(paisModel.FechaModificacion.Value.ToString("dd/MM/yyyy HH:mm"))</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><strong>Modificado por:</strong></p>
                            <p>@(paisModel.ModificadoPor ?? "Sistema")</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private PaisDto paisModel = new();
    private bool _esEdicion => Id > 0;
    private bool _cargando = false;
    private Alert? _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        if (_esEdicion)
        {
            await CargarPais();
        }
        else
        {
            // Valores por defecto para nuevo país
            paisModel.Activo = true;
        }
    }

    private async Task CargarPais()
    {
        try
        {
            _cargando = true;
            var pais = await PaisService.ObtenerPorIdAsync(Id);
            if (pais != null)
            {
                paisModel = pais;
            }
            else
            {
                if (_alertComponent != null)
                {
                    await _alertComponent.MostrarAsync("No se encontró el país solicitado", "Error", Alert.TipoAlerta.Error);
                }
                NavigationManager.NavigateTo("/paises");
            }
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error al cargar país: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private async Task GuardarPais()
    {
        try
        {
            _cargando = true;
            RespuestaDto respuesta;

            if (_esEdicion)
            {
                respuesta = await PaisService.ActualizarAsync(Id, paisModel);
            }
            else
            {
                respuesta = await PaisService.CrearAsync(paisModel);
            }

            if (respuesta.Exito)
            {
                NavigationManager.NavigateTo("/paises");
            }
            else
            {
                if (_alertComponent != null)
                {
                    await _alertComponent.MostrarAsync(respuesta.Detalle ?? "Error al guardar país", respuesta.Mensaje, Alert.TipoAlerta.Error);
                }
            }
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/paises");
    }
}
