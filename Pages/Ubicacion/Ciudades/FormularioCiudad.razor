@page "/ciudades/crear"
@page "/ciudades/editar/{Id:int}"
@using GeoTrack.WEB.Services.Interface
@using GeoTrack.WEB.Models.Ubicacion
@using GeoTrack.WEB.Shared
@using GeoTrack.WEB.Models
@using Microsoft.AspNetCore.Authorization
@inject ICiudadService CiudadService
@inject IPaisService PaisService
@inject IDepartamentoService DepartamentoService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="container-fluid">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">@(_esEdicion ? "Editar" : "Crear") Ciudad</h5>
        </div>
        <div class="card-body">
            <EditForm Model="ciudadModel" OnValidSubmit="GuardarCiudad" class="row g-3">
                <DataAnnotationsValidator />

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre <span class="text-danger">*</span></label>
                        <InputText id="nombre" @bind-Value="ciudadModel.Nombre" class="form-control" placeholder="Ingrese el nombre de la ciudad" maxlength="100" />
                        <ValidationMessage For="@(() => ciudadModel.Nombre)" class="text-danger" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="codigoPostal" class="form-label">Código Postal</label>
                        <InputText id="codigoPostal" @bind-Value="ciudadModel.CodigoPostal" class="form-control" placeholder="Ingrese el código postal" maxlength="20" />
                        <ValidationMessage For="@(() => ciudadModel.CodigoPostal)" class="text-danger" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="paisId" class="form-label">País <span class="text-danger">*</span></label>
                        <select id="paisId" class="form-select" @bind="PaisSeleccionado" @bind:after="CambiarPais">
                            <option value="0">Seleccione un país</option>
                            @foreach (var pais in _paises)
                            {
                                <option value="@pais.Id">@pais.Nombre</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => ciudadModel.PaisId)" class="text-danger" />
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="departamentoId" class="form-label">Departamento <span class="text-danger">*</span></label>
                        <InputSelect id="departamentoId" @bind-Value="ciudadModel.DepartamentoId" class="form-select">
                            <option value="0">Seleccione un departamento</option>
                            @foreach (var departamento in _departamentos)
                            {
                                <option value="@departamento.Id">@departamento.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => ciudadModel.DepartamentoId)" class="text-danger" />
                    </div>
                </div>

                @if (_esEdicion)
                {
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="estado" class="form-label">Estado</label>
                            <div class="form-check form-switch">
                                <InputCheckbox @bind-Value="ciudadModel.Activo" class="form-check-input" id="estado" />
                                <label class="form-check-label" for="estado">
                                    @(ciudadModel.Activo ? "Activo" : "Inactivo")
                                </label>
                            </div>
                        </div>
                    </div>
                }

                <div class="col-12 mt-4">
                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">
                            <i class="bi bi-x-circle me-1"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@_cargando">
                            @if (_cargando)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Guardando...</span>
                            }
                            else
                            {
                                <i class="bi bi-save me-1"></i>
                                <span>Guardar</span>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>

            <Alert @ref="_alertComponent" Desaparecible="true" AutoDesaparecer="true" TiempoDesaparicion="5000" />
        </div>
    </div>

    @if (_esEdicion && ciudadModel != null)
    {
        <div class="card mt-4">
            <div class="card-header bg-light">
                <h6 class="mb-0">Información adicional</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <p class="mb-1"><strong>Fecha de creación:</strong></p>
                        <p>@(ciudadModel.FechaCreacion.ToString("dd/MM/yyyy HH:mm"))</p>
                    </div>
                    <div class="col-md-6">
                        <p class="mb-1"><strong>Creado por:</strong></p>
                        <p>@(ciudadModel.CreadoPor ?? "Sistema")</p>
                    </div>
                    @if (ciudadModel.FechaModificacion.HasValue)
                    {
                        <div class="col-md-6">
                            <p class="mb-1"><strong>Fecha de modificación:</strong></p>
                            <p>@(ciudadModel.FechaModificacion.Value.ToString("dd/MM/yyyy HH:mm"))</p>
                        </div>
                        <div class="col-md-6">
                            <p class="mb-1"><strong>Modificado por:</strong></p>
                            <p>@(ciudadModel.ModificadoPor ?? "Sistema")</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "departamentoId")]
    public int? DepartamentoIdPredeterminado { get; set; }

    private CiudadDto ciudadModel = new();
    private List<PaisDto> _paises = new();
    private List<DepartamentoDto> _departamentos = new();
    private bool _esEdicion => Id > 0;
    private bool _cargando = false;
    private Alert? _alertComponent;

    private int PaisSeleccionado
    {
        get => ciudadModel.PaisId ?? 0;
        set
        {
            ciudadModel.PaisId = value > 0 ? value : null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarPaises();

        if (_esEdicion)
        {
            await CargarCiudad();
        }
        else
        {
            // Valores por defecto para nueva ciudad
            ciudadModel.Activo = true;
            
            // Si viene un departamento predeterminado
            if (DepartamentoIdPredeterminado.HasValue)
            {
                // Cargar el departamento para saber su país
                var departamento = await DepartamentoService.ObtenerPorIdAsync(DepartamentoIdPredeterminado.Value);
                if (departamento != null && departamento.PaisId > 0)
                {
                    ciudadModel.PaisId = departamento.PaisId;
                    ciudadModel.DepartamentoId = DepartamentoIdPredeterminado.Value;
                    await CargarDepartamentosPorPais(departamento.PaisId);
                }
            }
        }
    }

    private async Task CargarPaises()
    {
        try
        {
            _cargando = true;
            _paises = await PaisService.ObtenerTodosAsync();
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error al cargar países: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private async Task CargarDepartamentosPorPais(int paisId)
    {
        try
        {
            _cargando = true;
            _departamentos = await DepartamentoService.ObtenerPorPaisIdAsync(paisId);
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error al cargar departamentos: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private async Task CargarCiudad()
    {
        try
        {
            _cargando = true;
            var ciudad = await CiudadService.ObtenerPorIdAsync(Id);
            if (ciudad != null)
            {
                ciudadModel = ciudad;
                
                if (ciudad.PaisId.HasValue)
                {
                    await CargarDepartamentosPorPais(ciudad.PaisId.Value);
                }
            }
            else
            {
                if (_alertComponent != null)
                {
                    await _alertComponent.MostrarAsync("No se encontró la ciudad solicitada", "Error", Alert.TipoAlerta.Error);
                }
                NavigationManager.NavigateTo("/ciudades");
            }
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error al cargar ciudad: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private async Task CambiarPais()
    {
        ciudadModel.DepartamentoId = 0;
        if (ciudadModel.PaisId.HasValue && ciudadModel.PaisId.Value > 0)
        {
            await CargarDepartamentosPorPais(ciudadModel.PaisId.Value);
        }
        else
        {
            _departamentos.Clear();
        }
    }

    private async Task GuardarCiudad()
    {
        try
        {
            _cargando = true;
            RespuestaDto respuesta;

            if (_esEdicion)
            {
                respuesta = await CiudadService.ActualizarAsync(Id, ciudadModel);
            }
            else
            {
                respuesta = await CiudadService.CrearAsync(ciudadModel);
            }

            if (respuesta.Exito)
            {
                // Redirigir a la página del detalle del departamento si hay departamentoId
                if (ciudadModel.DepartamentoId > 0)
                {
                    NavigationManager.NavigateTo($"/departamentos/{ciudadModel.DepartamentoId}");
                }
                else
                {
                    NavigationManager.NavigateTo("/ciudades");
                }
            }
            else
            {
                if (_alertComponent != null)
                {
                    await _alertComponent.MostrarAsync(respuesta.Detalle ?? "Error al guardar ciudad", respuesta.Mensaje, Alert.TipoAlerta.Error);
                }
            }
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private void Cancelar()
    {
        // Redirigir a la página del detalle del departamento si hay departamentoId
        if (DepartamentoIdPredeterminado.HasValue)
        {
            NavigationManager.NavigateTo($"/departamentos/{DepartamentoIdPredeterminado.Value}");
        }
        else
        {
            NavigationManager.NavigateTo("/ciudades");
        }
    }
}