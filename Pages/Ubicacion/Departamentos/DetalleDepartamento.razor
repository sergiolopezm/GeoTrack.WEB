@page "/departamentos/{Id:int}"
@using GeoTrack.WEB.Services.Interface
@using GeoTrack.WEB.Models.Ubicacion
@using GeoTrack.WEB.Shared
@using GeoTrack.WEB.Models
@using Microsoft.AspNetCore.Authorization
@inject IDepartamentoService DepartamentoService
@inject ICiudadService CiudadService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="container-fluid">
    @if (_cargando)
    {
        <Loading Visible="true" Mensaje="Cargando información del departamento..." />
    }
    else if (_departamento != null)
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/departamentos">Departamentos</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@_departamento.Nombre</li>
                    </ol>
                </nav>
                <h3 class="mt-2">@_departamento.Nombre</h3>
                <p class="text-muted">País: <a href="/paises/@_departamento.PaisId">@_departamento.Pais</a></p>
            </div>
            <div>
                <button class="btn btn-outline-primary me-2" @onclick="() => EditarDepartamento(_departamento.Id)">
                    <i class="bi bi-pencil me-1"></i> Editar
                </button>
                <button class="btn btn-outline-danger" @onclick="() => ConfirmarEliminar(_departamento)">
                    <i class="bi bi-trash me-1"></i> Eliminar
                </button>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Información general</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h6 class="text-muted">Nombre</h6>
                            <p class="mb-0">@_departamento.Nombre</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="text-muted">País</h6>
                            <p class="mb-0">@_departamento.Pais</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="text-muted">Estado</h6>
                            <p class="mb-0">
                                @if (_departamento.Activo)
                                {
                                    <span class="badge bg-success">Activo</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Inactivo</span>
                                }
                            </p>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Información de auditoría</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <h6 class="text-muted">Fecha de creación</h6>
                            <p class="mb-0">@_departamento.FechaCreacion.ToString("dd/MM/yyyy HH:mm")</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="text-muted">Creado por</h6>
                            <p class="mb-0">@(_departamento.CreadoPor ?? "Sistema")</p>
                        </div>
                        @if (_departamento.FechaModificacion.HasValue)
                        {
                            <div class="mb-3">
                                <h6 class="text-muted">Fecha de modificación</h6>
                                <p class="mb-0">@_departamento.FechaModificacion.Value.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                            <div class="mb-3">
                                <h6 class="text-muted">Modificado por</h6>
                                <p class="mb-0">@(_departamento.ModificadoPor ?? "Sistema")</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-md-8">
                <div class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ciudades (@_ciudades.Count)</h5>
                        <a href="/ciudades/crear?departamentoId=@Id" class="btn btn-sm btn-light">
                            <i class="bi bi-plus-circle me-1"></i> Añadir Ciudad
                        </a>
                    </div>
                    <div class="card-body">
                        @if (_cargandoCiudades)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Cargando...</span>
                                </div>
                            </div>
                        }
                        else if (_ciudades.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>#</th>
                                            <th>Nombre</th>
                                            <th>Código Postal</th>
                                            <th>Estado</th>
                                            <th class="text-end">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var ciudad in _ciudades)
                                        {
                                            <tr>
                                                <td>@ciudad.Id</td>
                                                <td>@ciudad.Nombre</td>
                                                <td>@(ciudad.CodigoPostal ?? "N/A")</td>
                                                <td>
                                                    @if (ciudad.Activo)
                                                    {
                                                        <span class="badge bg-success">Activo</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Inactivo</span>
                                                    }
                                                </td>
                                                <td class="text-end">
                                                    <div class="btn-group">
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => VerDetalleCiudad(ciudad.Id)">
                                                            <i class="bi bi-eye"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-success" @onclick="() => EditarCiudad(ciudad.Id)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-building text-muted display-4"></i>
                                <p class="mt-3 text-muted">No hay ciudades registradas para este departamento</p>
                                <a href="/ciudades/crear?departamentoId=@Id" class="btn btn-primary mt-2">
                                    <i class="bi bi-plus-circle me-1"></i> Añadir la primera ciudad
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            El departamento solicitado no existe o ha sido eliminado.
        </div>
    }

    <Confirm @ref="_confirmDialog" 
             Titulo="Confirmar eliminación" 
             TextoBotonAceptar="Eliminar" 
             TextoBotonCancelar="Cancelar"
             BotonAceptarClase="danger" 
             OnConfirm="EliminarDepartamento" />

    <Alert @ref="_alertComponent" Desaparecible="true" AutoDesaparecer="true" TiempoDesaparicion="5000" />
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private DepartamentoDto? _departamento;
    private List<CiudadDto> _ciudades = new();
    private bool _cargando = true;
    private bool _cargandoCiudades = true;
    private Confirm? _confirmDialog;
    private Alert? _alertComponent;

    protected override async Task OnInitializedAsync()
    {
        await CargarDepartamento();
    }

    private async Task CargarDepartamento()
    {
        try
        {
            _cargando = true;
            _departamento = await DepartamentoService.ObtenerPorIdAsync(Id);

            if (_departamento != null)
            {
                await CargarCiudades();
            }
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error al cargar información del departamento: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargando = false;
        }
    }

    private async Task CargarCiudades()
    {
        try
        {
            _cargandoCiudades = true;
            _ciudades = await CiudadService.ObtenerPorDepartamentoIdAsync(Id);
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error al cargar ciudades: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
        finally
        {
            _cargandoCiudades = false;
        }
    }

    private void EditarDepartamento(int id)
    {
        NavigationManager.NavigateTo($"/departamentos/editar/{id}");
    }

    private void VerDetalleCiudad(int id)
    {
        NavigationManager.NavigateTo($"/ciudades/{id}");
    }

    private void EditarCiudad(int id)
    {
        NavigationManager.NavigateTo($"/ciudades/editar/{id}");
    }

    private async Task ConfirmarEliminar(DepartamentoDto departamento)
    {
        if (_confirmDialog != null)
        {
            await _confirmDialog.MostrarAsync($"¿Está seguro de eliminar el departamento '{departamento.Nombre}'? Esta acción no se puede deshacer.");
        }
    }

    private async Task EliminarDepartamento()
    {
        try
        {
            var respuesta = await DepartamentoService.EliminarAsync(Id);

            if (respuesta.Exito)
            {
                NavigationManager.NavigateTo("/departamentos");
            }
            else
            {
                if (_alertComponent != null)
                {
                    await _alertComponent.MostrarAsync(respuesta.Detalle ?? "Error al eliminar departamento", respuesta.Mensaje, Alert.TipoAlerta.Error);
                }
            }
        }
        catch (Exception ex)
        {
            if (_alertComponent != null)
            {
                await _alertComponent.MostrarAsync($"Error: {ex.Message}", "Error", Alert.TipoAlerta.Error);
            }
        }
    }
}
